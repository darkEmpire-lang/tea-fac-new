import React, { useEffect, useState, useRef } from "react";
import {
  getIncomes,
  addIncome,
  updateIncome,
  deleteIncome,
} from "../api/api";
import {
  Table,
  Tbody,
  Tr,
  Th,
  Td,
  Thead,
  IconButton,
  Button,
  useToast,
  Box,
  Badge,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
  ModalCloseButton,
  FormControl,
  FormLabel,
  Input,
  Textarea,
  FormErrorMessage,
  Select,
  Tooltip as ChakraTooltip,
  useDisclosure,
  VStack,
} from "@chakra-ui/react";
import { FiEdit2, FiTrash2, FiFileText } from "react-icons/fi";
import { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid } from "recharts";
import html2canvas from "html2canvas";
import download from "downloadjs";
import teaLogo from "../assets/teatfac.png";

// Categories for select
const INCOME_CATEGORIES = [
  "Tea Sales", "Retail", "Export", "Tourism", "Grants", "Other"
];

function formatMoney(amount) {
  return "LKR" + Number(amount).toLocaleString();
}

// High-quality PNG report component
const IncomePNGReport = React.forwardRef(
  ({ totalIncome, categoryTotals, date }, ref) => (
    <div
      ref={ref}
      style={{
        width: 700,
        background: "#fbfbfb",
        borderRadius: 24,
        boxShadow: "0 8px 32px rgba(32,77,42,0.10)",
        border: "3px solid #2e865f",
        padding: 0,
        overflow: "hidden",
        fontFamily: "Inter, system-ui, sans-serif",
        color: "#204d2a",
        margin: "0 auto",
      }}
    >
      {/* Header with Logo */}
      <div
        style={{
          background: "linear-gradient(90deg,#17612d 0%,#2e865f 100%)",
          padding: "32px 0 20px 0",
          textAlign: "center",
          position: "relative",
        }}
      >
        <div
          style={{
            margin: "0 auto 12px auto",
            width: 96,
            height: 96,
            borderRadius: "50%",
            background: "#fff",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            boxShadow: "0 2px 12px rgba(46,134,95,0.13)",
            border: "4px solid #e6f9ed",
          }}
        >
          <img
            src={teaLogo}
            alt="Logo"
            style={{
              width: 72,
              height: 72,
              borderRadius: "50%",
              objectFit: "cover",
            }}
          />
        </div>
        <div
          style={{
            fontWeight: 800,
            fontSize: 28,
            color: "#fff",
            letterSpacing: 1,
          }}
        >
          Newlands Tea Factory
        </div>
        <div
          style={{
            fontWeight: 500,
            fontSize: 16,
            color: "#e6f9ed",
            marginTop: 4,
            letterSpacing: 0.5,
          }}
        >
          Income Report
        </div>
      </div>
      {/* Main Content */}
      <div style={{ padding: "36px 32px 24px 32px" }}>
        <div style={{ fontWeight: 600, fontSize: 20, marginBottom: 16 }}>
          Total Income: <span style={{ color: "#2e865f" }}>{formatMoney(totalIncome)}</span>
        </div>
        <table style={{ width: "100%", fontSize: 17, marginBottom: 18 }}>
          <thead>
            <tr>
              <th style={{ textAlign: "left", padding: "10px 0", color: "#17612d" }}>Category</th>
              <th style={{ textAlign: "right", padding: "10px 0", color: "#17612d" }}>Amount</th>
            </tr>
          </thead>
          <tbody>
            {Object.entries(categoryTotals).map(([cat, amt]) => (
              <tr key={cat}>
                <td style={{ padding: "9px 0", fontWeight: 500 }}>{cat}</td>
                <td style={{ padding: "9px 0", textAlign: "right", fontWeight: 600 }}>
                  {formatMoney(amt)}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
        <div
          style={{
            background: "#e6f9ed",
            borderRadius: 12,
            padding: "18px 20px",
            margin: "18px 0",
            fontSize: 16,
            color: "#17612d",
            fontWeight: 500,
            textAlign: "center",
          }}
        >
          <span>
            This report summarizes all income sources for Newlands Tea Factory.
          </span>
        </div>
        <div
          style={{
            display: "flex",
            justifyContent: "space-between",
            marginTop: 28,
            fontSize: 15,
            color: "#64748b",
          }}
        >
          <span>
            <b>Generated by:</b> Financial Admin
          </span>
          <span>
            <b>Date:</b> {date}
          </span>
        </div>
      </div>
      {/* Footer */}
      <div
        style={{
          background: "#17612d",
          color: "#e6f9ed",
          padding: "14px 0",
          textAlign: "center",
          fontSize: 14,
          borderRadius: "0 0 20px 20px",
          fontWeight: 500,
          letterSpacing: 0.5,
        }}
      >
        &copy; {new Date().getFullYear()} Newlands Tea Factory &mdash; All rights reserved.
      </div>
    </div>
  )
);

function AddEditIncomeModal({ isOpen, onClose, onSave, initialData }) {
  const [form, setForm] = useState({
    category: "",
    amount: "",
    date: "",
    description: "",
  });
  const [errors, setErrors] = useState({});
  const toast = useToast();

  useEffect(() => {
    if (initialData) {
      setForm({
        category: initialData.category || "",
        amount: initialData.amount || "",
        date: initialData.date ? initialData.date.slice(0, 10) : "",
        description: initialData.description || "",
      });
      setErrors({});
    } else {
      setForm({
        category: "",
        amount: "",
        date: "",
        description: "",
      });
      setErrors({});
    }
  }, [initialData, isOpen]);

  // Only allow numbers in amount field
  const handleAmountInput = (e) => {
    const { value } = e.target;
    if (/^[0-9]*\.?[0-9]*$/.test(value)) {
      setForm((prev) => ({ ...prev, amount: value }));
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    if (name === "amount") {
      handleAmountInput(e);
    } else {
      setForm((prev) => ({ ...prev, [name]: value }));
    }
  };

  const validate = () => {
    let errs = {};
    if (!form.category) errs.category = "Category is required";
    if (!form.amount) errs.amount = "Amount is required";
    else if (!/^[0-9]+(\.[0-9]{1,2})?$/.test(form.amount)) errs.amount = "Amount must be a valid number";
    else if (isNaN(form.amount) || Number(form.amount) <= 0) errs.amount = "Amount must be greater than 0";
    if (!form.date) errs.date = "Date is required";
    return errs;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const errs = validate();
    setErrors(errs);
    if (Object.keys(errs).length) return;
    onSave({
      ...form,
      amount: Number(form.amount),
    });
    toast({
      title: initialData ? "Income updated!" : "Income added!",
      status: "success",
      duration: 1200,
      isClosable: true,
    });
    onClose();
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} size="md" isCentered motionPreset="slideInBottom">
      <ModalOverlay />
      <ModalContent borderRadius="xl" boxShadow="2xl">
        <ModalHeader fontWeight="bold" color="green.800" fontSize="2xl" borderBottom="1px solid #e6f9ed">
          {initialData ? "Edit Income" : "Add Income"}
        </ModalHeader>
        <ModalCloseButton />
        <form onSubmit={handleSubmit}>
          <ModalBody py={6}>
            <VStack spacing={4}>
              <FormControl isInvalid={!!errors.category} isRequired>
                <FormLabel>Category</FormLabel>
                <Select
                  name="category"
                  value={form.category}
                  onChange={handleChange}
                  placeholder="Select category"
                  bg="gray.50"
                >
                  {INCOME_CATEGORIES.map((cat) => (
                    <option value={cat} key={cat}>{cat}</option>
                  ))}
                </Select>
                <FormErrorMessage>{errors.category}</FormErrorMessage>
              </FormControl>
              <FormControl isInvalid={!!errors.amount} isRequired>
                <FormLabel>Amount</FormLabel>
                <Input
                  name="amount"
                  type="text"
                  value={form.amount}
                  onChange={handleChange}
                  inputMode="decimal"
                  pattern="[0-9]*"
                  bg="gray.50"
                  onKeyDown={e => {
                    if (
                      ["e", "E", "+", "-"].includes(e.key) ||
                      (e.key === "." && (form.amount.includes(".") || form.amount.length === 0))
                    ) {
                      e.preventDefault();
                    }
                  }}
                  placeholder="Enter amount"
                />
                <FormErrorMessage>{errors.amount}</FormErrorMessage>
              </FormControl>
              <FormControl isInvalid={!!errors.date} isRequired>
                <FormLabel>Date</FormLabel>
                <Input
                  name="date"
                  type="date"
                  value={form.date}
                  onChange={handleChange}
                  bg="gray.50"
                />
                <FormErrorMessage>{errors.date}</FormErrorMessage>
              </FormControl>
              <FormControl>
                <FormLabel>Description</FormLabel>
                <Textarea
                  name="description"
                  value={form.description}
                  onChange={handleChange}
                  bg="gray.50"
                  placeholder="Description (optional)"
                />
              </FormControl>
            </VStack>
          </ModalBody>
          <ModalFooter borderTop="1px solid #e6f9ed">
            <Button
              colorScheme="green"
              mr={3}
              type="submit"
              size="md"
              fontWeight="bold"
              px={8}
              boxShadow="md"
            >
              {initialData ? "Update" : "Add"}
            </Button>
            <Button onClick={onClose} variant="ghost" colorScheme="gray">
              Cancel
            </Button>
          </ModalFooter>
        </form>
      </ModalContent>
    </Modal>
  );
}

export default function Incomes() {
  const [incomes, setIncomes] = useState([]);
  const [filtered, setFiltered] = useState([]);
  const [modalOpen, setModalOpen] = useState(false);
  const [editData, setEditData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [search, setSearch] = useState("");
  const [dateRange, setDateRange] = useState({ from: "", to: "" });
  const toast = useToast();
  const pngRef = useRef();

  useEffect(() => {
    setLoading(true);
    const timer = setTimeout(async () => {
      const res = await getIncomes();
      setIncomes(res.data);
      setFiltered(res.data);
      setLoading(false);
    }, 1200);
    return () => clearTimeout(timer);
  }, []);

  useEffect(() => {
    let data = incomes;
    if (search.trim()) {
      data = data.filter(
        (i) =>
          i.category?.toLowerCase().includes(search.toLowerCase()) ||
          i.description?.toLowerCase().includes(search.toLowerCase())
      );
    }
    if (dateRange.from) {
      data = data.filter(i => new Date(i.date) >= new Date(dateRange.from));
    }
    if (dateRange.to) {
      data = data.filter(i => new Date(i.date) <= new Date(dateRange.to));
    }
    setFiltered(data);
  }, [search, dateRange, incomes]);

  const handleSave = async (data) => {
    if (editData) {
      await updateIncome(editData._id, data);
      toast({ title: "Income updated!", status: "success", duration: 1200, isClosable: true });
    } else {
      await addIncome(data);
      toast({ title: "Income added!", status: "success", duration: 1200, isClosable: true });
    }
    const res = await getIncomes();
    setIncomes(res.data);
    setModalOpen(false);
    setEditData(null);
  };

  const handleDelete = async (id) => {
    await deleteIncome(id);
    const res = await getIncomes();
    setIncomes(res.data);
    toast({ title: "Income deleted.", status: "info", duration: 1200, isClosable: true });
  };

  // Chart data
  const chartData = [];
  filtered
    .sort((a, b) => new Date(a.date) - new Date(b.date))
    .forEach((item) => {
      const date = new Date(item.date).toLocaleDateString();
      const existing = chartData.find((c) => c.date === date);
      if (existing) existing.amount += Number(item.amount);
      else chartData.push({ date, amount: Number(item.amount) });
    });

  const totalIncome = filtered.reduce((sum, i) => sum + Number(i.amount), 0);

  // Category totals for report
  const categoryTotals = {};
  INCOME_CATEGORIES.forEach(cat => {
    categoryTotals[cat] = filtered
      .filter(i => i.category === cat)
      .reduce((sum, i) => sum + Number(i.amount), 0);
  });

  const todayStr = new Date().toLocaleDateString("en-GB", {
    day: "2-digit", month: "short", year: "numeric"
  });

  // PNG Download handler
  const handleDownloadPNG = async () => {
    if (!pngRef.current) return;
    toast({ title: "Generating PNG report...", status: "info", duration: 1200 });
    setTimeout(async () => {
      const canvas = await html2canvas(pngRef.current, {
        backgroundColor: "#fbfbfb",
        scale: 3,
        useCORS: true,
      });
      const dataURL = canvas.toDataURL("image/png");
      download(dataURL, `income_report_${todayStr.replace(/\s/g, "_")}.png`, "image/png");
      toast({ title: "PNG report downloaded!", status: "success", duration: 1200 });
    }, 100);
  };

  function Spinner() {
    return (
      <div className="flex justify-center items-center h-40">
        <svg className="animate-spin h-12 w-12 text-green-600" fill="none" viewBox="0 0 24 24">
          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"/>
          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z"/>
        </svg>
      </div>
    );
  }

  return (
    <div className="p-6 bg-gray-50 min-h-screen">
      {/* Header */}
      <div className="flex flex-col md:flex-row md:justify-between md:items-center mb-8">
        <div>
          <h2 className="text-3xl font-bold text-green-900 mb-1">Income Dashboard</h2>
          <p className="text-gray-600">Track all income sources and trends for your tea factory</p>
        </div>
        <div className="flex flex-col md:flex-row gap-3 mt-4 md:mt-0">
          <Button
            onClick={() => { setModalOpen(true); setEditData(null); }}
            colorScheme="green"
            size="md"
            className="shadow-lg"
            leftIcon={
              <svg className="w-5 h-5" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                <path d="M12 4v16m8-8H4"/>
              </svg>
            }
          >
            Add Income
          </Button>
          <Button
            onClick={handleDownloadPNG}
            colorScheme="green"
            size="md"
            className="shadow-lg"
            leftIcon={<FiFileText />}
          >
            Export Report
          </Button>
        </div>
      </div>

      {/* Hidden PNG Report Template (for download) */}
      <div style={{ position: "absolute", left: "-9999px", top: 0 }}>
        <IncomePNGReport
          ref={pngRef}
          totalIncome={totalIncome}
          categoryTotals={categoryTotals}
          date={todayStr}
        />
      </div>

      {/* Summary and Chart */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-10">
        <div className="bg-white rounded-xl p-8 shadow flex items-center col-span-1">
          <div className="bg-green-100 p-5 rounded-full mr-5">
            <span className="text-3xl">💵</span>
          </div>
          <div>
            <div className="text-gray-500 text-base">Total Income</div>
            <div className="text-2xl font-bold text-green-700">
              {formatMoney(totalIncome)}
            </div>
          </div>
        </div>
        <div className="col-span-2 bg-white rounded-xl p-6 shadow flex flex-col">
          <div className="font-semibold mb-2 text-green-900">Income Trend</div>
          <div className="w-full h-48">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={chartData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="date" />
                <YAxis />
                <Tooltip />
                <Line type="monotone" dataKey="amount" stroke="#16a34a" strokeWidth={3} />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>

      {/* Filters */}
      <div className="flex flex-col md:flex-row md:items-center md:space-x-6 mb-6">
        <Input
          type="text"
          placeholder="Search by category or description"
          className="mb-3 md:mb-0 w-full md:w-64"
          value={search}
          onChange={e => setSearch(e.target.value)}
          bg="white"
        />
        <div className="flex space-x-2">
          <Input
            type="date"
            value={dateRange.from}
            onChange={e => setDateRange({ ...dateRange, from: e.target.value })}
            bg="white"
          />
          <span className="text-gray-500 font-medium flex items-center">to</span>
          <Input
            type="date"
            value={dateRange.to}
            onChange={e => setDateRange({ ...dateRange, to: e.target.value })}
            bg="white"
          />
        </div>
        <Button
          onClick={() => {
            setSearch("");
            setDateRange({ from: "", to: "" });
          }}
          colorScheme="gray"
          variant="outline"
          className="ml-0 md:ml-4 mt-3 md:mt-0"
        >
          Reset
        </Button>
      </div>

      {/* Table */}
      <Box overflowX="auto" bg="white" rounded="xl" shadow="md" p={4}>
        {loading ? (
          <Spinner />
        ) : (
          <Table variant="striped" colorScheme="gray" size="md">
            <Thead bg="gray.100">
              <Tr>
                <Th>Category</Th>
                <Th>Amount</Th>
                <Th>Date</Th>
                <Th>Description</Th>
                <Th>Actions</Th>
              </Tr>
            </Thead>
            <Tbody>
              {filtered.length === 0 && (
                <Tr>
                  <Td colSpan={5} textAlign="center" py={8} color="gray.400">
                    No income records found.
                  </Td>
                </Tr>
              )}
              {filtered.map((income) => (
                <Tr key={income._id} _hover={{ bg: "gray.50" }}>
                  <Td>{income.category}</Td>
                  <Td>
                    <Badge colorScheme="green" variant="subtle" fontSize="md">
                      {formatMoney(income.amount)}
                    </Badge>
                  </Td>
                  <Td>{new Date(income.date).toLocaleDateString()}</Td>
                  <Td>{income.description}</Td>
                  <Td>
                    <ChakraTooltip label="Edit" hasArrow>
                      <IconButton
                        icon={<FiEdit2 />}
                        aria-label="Edit"
                        colorScheme="blue"
                        variant="ghost"
                        size="sm"
                        mr={2}
                        onClick={() => {
                          setEditData(income);
                          setModalOpen(true);
                        }}
                      />
                    </ChakraTooltip>
                    <ChakraTooltip label="Delete" hasArrow>
                      <IconButton
                        icon={<FiTrash2 />}
                        aria-label="Delete"
                        colorScheme="red"
                        variant="ghost"
                        size="sm"
                        onClick={() => handleDelete(income._id)}
                      />
                    </ChakraTooltip>
                  </Td>
                </Tr>
              ))}
            </Tbody>
          </Table>
        )}
      </Box>

      <AddEditIncomeModal
        isOpen={modalOpen}
        onClose={() => {
          setModalOpen(false);
          setEditData(null);
        }}
        onSave={handleSave}
        initialData={editData}
      />
    </div>
  );
}
