import React, { useEffect, useState, useRef } from "react";
import {
  getExpenses,
  addExpense,
  updateExpense,
  deleteExpense,
} from "../api/api";
import Swal from "sweetalert2";
import { nanoid } from "nanoid";
import { Doughnut } from "react-chartjs-2";
import {
  Chart as ChartJS,
  ArcElement,
  Tooltip,
  Legend,
} from "chart.js";
import {
  Button,
  Badge,
  IconButton,
  Tooltip as ChakraTooltip,
  Box,
  useToast,
  Input,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
  ModalCloseButton,
  FormControl,
  FormLabel,
  FormErrorMessage,
  Select,
  VStack,
} from "@chakra-ui/react";
import { FiEdit2, FiTrash2, FiArrowLeft, FiFileText } from "react-icons/fi";
import html2canvas from "html2canvas";
import download from "downloadjs";
import teaLogo from "../assets/teatfac.png";

ChartJS.register(ArcElement, Tooltip, Legend);

const CATEGORIES = [
  "Electricity Bill",
  "Water Bill",
  "Machinery Maintenance",
  "Raw Materials",
  "Packaging",
  "Transportation",
  "Employee Salaries",
  "Welfare",
  "Marketing",
  "Office Supplies",
  "Factory Rent",
  "Security",
  "Cleaning",
  "Insurance",
  "Miscellaneous",
];

function formatMoney(amount) {
  return "LKR" + Number(amount).toLocaleString();
}

// High-quality PNG report component (only present categories)
const ExpensePNGReport = React.forwardRef(
  ({ totalExpense, categoryTotals, date }, ref) => (
    <div
      ref={ref}
      style={{
        width: 700,
        background: "#fbfbfb",
        borderRadius: 24,
        boxShadow: "0 8px 32px rgba(32,77,42,0.10)",
        border: "3px solid #2e865f",
        padding: 0,
        overflow: "hidden",
        fontFamily: "Inter, system-ui, sans-serif",
        color: "#204d2a",
        margin: "0 auto",
      }}
    >
      <div
        style={{
          background: "linear-gradient(90deg,#17612d 0%,#2e865f 100%)",
          padding: "32px 0 20px 0",
          textAlign: "center",
          position: "relative",
        }}
      >
        <div
          style={{
            margin: "0 auto 12px auto",
            width: 96,
            height: 96,
            borderRadius: "50%",
            background: "#fff",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            boxShadow: "0 2px 12px rgba(46,134,95,0.13)",
            border: "4px solid #e6f9ed",
          }}
        >
          <img
            src={teaLogo}
            alt="Logo"
            style={{
              width: 72,
              height: 72,
              borderRadius: "50%",
              objectFit: "cover",
            }}
          />
        </div>
        <div
          style={{
            fontWeight: 800,
            fontSize: 28,
            color: "#fff",
            letterSpacing: 1,
          }}
        >
          Newlands Tea Factory
        </div>
        <div
          style={{
            fontWeight: 500,
            fontSize: 16,
            color: "#e6f9ed",
            marginTop: 4,
            letterSpacing: 0.5,
          }}
        >
          Expense Report
        </div>
      </div>
      <div style={{ padding: "36px 32px 24px 32px" }}>
        <div style={{ fontWeight: 600, fontSize: 20, marginBottom: 16 }}>
          Total Expenses: <span style={{ color: "#ef4444" }}>{formatMoney(totalExpense)}</span>
        </div>
        <table style={{ width: "100%", fontSize: 17, marginBottom: 18 }}>
          <thead>
            <tr>
              <th style={{ textAlign: "left", padding: "10px 0", color: "#17612d" }}>Category</th>
              <th style={{ textAlign: "right", padding: "10px 0", color: "#17612d" }}>Amount</th>
            </tr>
          </thead>
          <tbody>
            {Object.entries(categoryTotals)
              .filter(([_, amt]) => amt > 0)
              .map(([cat, amt]) => (
                <tr key={cat}>
                  <td style={{ padding: "9px 0", fontWeight: 500 }}>{cat}</td>
                  <td style={{ padding: "9px 0", textAlign: "right", fontWeight: 600 }}>
                    {formatMoney(amt)}
                  </td>
                </tr>
              ))}
          </tbody>
        </table>
        <div
          style={{
            background: "#e6f9ed",
            borderRadius: 12,
            padding: "18px 20px",
            margin: "18px 0",
            fontSize: 16,
            color: "#17612d",
            fontWeight: 500,
            textAlign: "center",
          }}
        >
          <span>
            This report summarizes all expense sources for Newlands Tea Factory.
          </span>
        </div>
        <div
          style={{
            display: "flex",
            justifyContent: "space-between",
            marginTop: 28,
            fontSize: 15,
            color: "#64748b",
          }}
        >
          <span>
            <b>Generated by:</b> Financial Admin
          </span>
          <span>
            <b>Date:</b> {date}
          </span>
        </div>
      </div>
      <div
        style={{
          background: "#17612d",
          color: "#e6f9ed",
          padding: "14px 0",
          textAlign: "center",
          fontSize: 14,
          borderRadius: "0 0 20px 20px",
          fontWeight: 500,
          letterSpacing: 0.5,
        }}
      >
        &copy; {new Date().getFullYear()} Newlands Tea Factory &mdash; All rights reserved.
      </div>
    </div>
  )
);

function AddEditExpenseModal({ isOpen, onClose, onSave, initialData }) {
  const [form, setForm] = useState({
    category: "",
    amount: "",
    date: "",
    description: "",
    status: "Pending",
  });
  const [errors, setErrors] = useState({});
  const toast = useToast();

  useEffect(() => {
    if (initialData) {
      setForm({
        category: initialData.category || "",
        amount: initialData.amount || "",
        date: initialData.date ? initialData.date.slice(0, 10) : "",
        description: initialData.description || "",
        status: initialData.status || "Pending",
      });
      setErrors({});
    } else {
      setForm({
        category: "",
        amount: "",
        date: "",
        description: "",
        status: "Pending",
      });
      setErrors({});
    }
  }, [initialData, isOpen]);

  const handleAmountInput = (e) => {
    const { value } = e.target;
    if (/^[0-9]*\.?[0-9]*$/.test(value)) {
      setForm((prev) => ({ ...prev, amount: value }));
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    if (name === "amount") {
      handleAmountInput(e);
    } else {
      setForm((prev) => ({ ...prev, [name]: value }));
    }
  };

  const validate = () => {
    let errs = {};
    if (!form.category) errs.category = "Category is required";
    if (!form.amount) errs.amount = "Amount is required";
    else if (!/^[0-9]+(\.[0-9]{1,2})?$/.test(form.amount)) errs.amount = "Amount must be a valid number";
    else if (isNaN(form.amount) || Number(form.amount) <= 0) errs.amount = "Amount must be greater than 0";
    if (!form.date) errs.date = "Date is required";
    return errs;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const errs = validate();
    setErrors(errs);
    if (Object.keys(errs).length) return;
    onSave({
      ...form,
      amount: Number(form.amount),
    });
    toast({
      title: initialData ? "Expense updated!" : "Expense added!",
      status: "success",
      duration: 1200,
      isClosable: true,
    });
    onClose();
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} size="md" isCentered motionPreset="slideInBottom">
      <ModalOverlay />
      <ModalContent borderRadius="xl" boxShadow="2xl">
        <ModalHeader fontWeight="bold" color="green.800" fontSize="2xl" borderBottom="1px solid #e6f9ed">
          {initialData ? "Edit Expense" : "Add Expense"}
        </ModalHeader>
        <ModalCloseButton />
        <form onSubmit={handleSubmit}>
          <ModalBody py={6}>
            <VStack spacing={4}>
              <FormControl isInvalid={!!errors.category} isRequired>
                <FormLabel>Category</FormLabel>
                <Select
                  name="category"
                  value={form.category}
                  onChange={handleChange}
                  placeholder="Select category"
                  bg="gray.50"
                >
                  {CATEGORIES.map((cat) => (
                    <option value={cat} key={cat}>{cat}</option>
                  ))}
                </Select>
                <FormErrorMessage>{errors.category}</FormErrorMessage>
              </FormControl>
              <FormControl isInvalid={!!errors.amount} isRequired>
                <FormLabel>Amount</FormLabel>
                <Input
                  name="amount"
                  type="text"
                  value={form.amount}
                  onChange={handleChange}
                  inputMode="decimal"
                  pattern="[0-9]*"
                  bg="gray.50"
                  onKeyDown={e => {
                    if (
                      ["e", "E", "+", "-"].includes(e.key) ||
                      (e.key === "." && (form.amount.includes(".") || form.amount.length === 0))
                    ) {
                      e.preventDefault();
                    }
                  }}
                  placeholder="Enter amount"
                />
                <FormErrorMessage>{errors.amount}</FormErrorMessage>
              </FormControl>
              <FormControl isInvalid={!!errors.date} isRequired>
                <FormLabel>Date</FormLabel>
                <Input
                  name="date"
                  type="date"
                  value={form.date}
                  onChange={handleChange}
                  bg="gray.50"
                />
                <FormErrorMessage>{errors.date}</FormErrorMessage>
              </FormControl>
              <FormControl>
                <FormLabel>Description</FormLabel>
                <Input
                  name="description"
                  value={form.description}
                  onChange={handleChange}
                  bg="gray.50"
                  placeholder="Description (optional)"
                />
              </FormControl>
              <FormControl>
                <FormLabel>Status</FormLabel>
                <Select
                  name="status"
                  value={form.status}
                  onChange={handleChange}
                  bg="gray.50"
                >
                  <option value="Pending">Pending</option>
                  <option value="Approved">Approved</option>
                </Select>
              </FormControl>
            </VStack>
          </ModalBody>
          <ModalFooter borderTop="1px solid #e6f9ed">
            <Button
              colorScheme="green"
              mr={3}
              type="submit"
              size="md"
              fontWeight="bold"
              px={8}
              boxShadow="md"
            >
              {initialData ? "Update" : "Add"}
            </Button>
            <Button onClick={onClose} variant="ghost" colorScheme="gray">
              Cancel
            </Button>
          </ModalFooter>
        </form>
      </ModalContent>
    </Modal>
  );
}

export default function Expenses() {
  const [expenses, setExpenses] = useState([]);
  const [editData, setEditData] = useState(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [search, setSearch] = useState("");
  const [filterCat, setFilterCat] = useState("");
  const [filterDate, setFilterDate] = useState("");
  const [showChart, setShowChart] = useState(false);
  const toast = useToast();
  const pngRef = useRef();

  useEffect(() => {
    const fetchExpenses = async () => {
      const res = await getExpenses();
      setExpenses(res.data);
    };
    fetchExpenses();
  }, []);

  const handleSave = async (data) => {
    if (editData) {
      await updateExpense(editData._id, data);
      Swal.fire({
        title: "Updated!",
        text: "Expense updated successfully.",
        icon: "success",
        timer: 1500,
        showConfirmButton: false,
      });
    } else {
      await addExpense(data);
      Swal.fire({
        title: "Added!",
        text: "Expense added successfully.",
        icon: "success",
        timer: 1500,
        showConfirmButton: false,
      });
    }
    const res = await getExpenses();
    setExpenses(res.data);
    setEditData(null);
    setModalOpen(false);
  };

  const handleDelete = async (id) => {
    Swal.fire({
      title: "Are you sure?",
      text: "You won't be able to revert this!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#16a34a",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, delete it!",
    }).then(async (result) => {
      if (result.isConfirmed) {
        await deleteExpense(id);
        const res = await getExpenses();
        setExpenses(res.data);
        Swal.fire({
          title: "Deleted!",
          text: "Expense deleted.",
          icon: "success",
          timer: 1200,
          showConfirmButton: false,
        });
      }
    });
  };

  // Filtered & searched expenses
  const filteredExpenses = expenses
    .filter((e) =>
      (!filterCat || e.category === filterCat) &&
      (!filterDate || e.date === filterDate) &&
      (e.category.toLowerCase().includes(search.toLowerCase()) ||
        e.description.toLowerCase().includes(search.toLowerCase()) ||
        (e.expenseId && e.expenseId.toLowerCase().includes(search.toLowerCase())))
    );

  const totalExpense = filteredExpenses.reduce((sum, e) => sum + Number(e.amount), 0);

  // Only present categories for report
  const categoryTotals = {};
  filteredExpenses.forEach(e => {
    if (!categoryTotals[e.category]) categoryTotals[e.category] = 0;
    categoryTotals[e.category] += Number(e.amount);
  });

  // Doughnut chart data (category distribution)
  const catTotals = CATEGORIES.map((cat) =>
    filteredExpenses.filter((e) => e.category === cat).reduce((sum, e) => sum + Number(e.amount), 0)
  );
  const doughnutData = {
    labels: CATEGORIES,
    datasets: [
      {
        data: catTotals,
        backgroundColor: [
          "#16a34a", "#f59e42", "#ef4444", "#0ea5e9", "#a21caf", "#fbbf24", "#f472b6",
          "#10b981", "#eab308", "#6366f1", "#22d3ee", "#f43f5e", "#84cc16", "#f97316", "#64748b"
        ],
        borderWidth: 2,
      },
    ],
  };

  const todayStr = new Date().toLocaleDateString("en-GB", {
    day: "2-digit", month: "short", year: "numeric"
  });

  // PNG Download handler
  const handleDownloadPNG = async () => {
    if (!pngRef.current) return;
    toast({ title: "Generating PNG report...", status: "info", duration: 1200 });
    setTimeout(async () => {
      const canvas = await html2canvas(pngRef.current, {
        backgroundColor: "#fbfbfb",
        scale: 3,
        useCORS: true,
      });
      const dataURL = canvas.toDataURL("image/png");
      download(dataURL, `expense_report_${todayStr.replace(/\s/g, "_")}.png`, "image/png");
      toast({ title: "PNG report downloaded!", status: "success", duration: 1200 });
    }, 100);
  };

  return (
    <div className="p-2 sm:p-6 bg-gray-50 min-h-screen">
      {/* Header */}
      <div className="flex flex-col md:flex-row md:justify-between md:items-center mb-8">
        <div>
          <h2 className="text-3xl font-bold text-green-900 mb-1">Expense Dashboard</h2>
          <p className="text-gray-600">Track all Expenses sources and trends for your tea factory</p>
        </div>
        <div className="flex flex-col md:flex-row gap-3 mt-4 md:mt-0">
          <Button
            onClick={() => setModalOpen(true)}
            colorScheme="green"
            size="md"
            className="shadow-lg"
            leftIcon={
              <svg className="w-5 h-5" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                <path d="M12 4v16m8-8H4"/>
              </svg>
            }
          >
            Add Expense
          </Button>
          <Button
            onClick={handleDownloadPNG}
            colorScheme="green"
            size="md"
            className="shadow-lg"
            leftIcon={<FiFileText />}
          >
            Export Report
          </Button>
        </div>
      </div>

      {/* Hidden PNG Report Template (for download) */}
      <div style={{ position: "absolute", left: "-9999px", top: 0 }}>
        <ExpensePNGReport
          ref={pngRef}
          totalExpense={totalExpense}
          categoryTotals={categoryTotals}
          date={todayStr}
        />
      </div>

      {/* Header Bar */}
      <div className="bg-white rounded-t-xl px-2 sm:px-6 py-4 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
        <span className="text-green-900 text-xl font-bold tracking-wide flex items-center">
          <IconButton
            icon={<FiArrowLeft />}
            onClick={() => window.location.href = "/"}
            aria-label="Back to Dashboard"
            colorScheme="whiteAlpha"
            variant="ghost"
            className="mr-2"
            fontSize="2xl"
          />
          <svg width="26" height="26" fill="none" viewBox="0 0 24 24"><path fill="#2e865f" d="M12 2C6.48 2 2 6.48 2 12c0 5.52 4.48 10 10 10s10-4.48 10-10C22 6.48 17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8 0-4.41 3.59-8 8-8 4.41 0 8 3.59 8 8 0 4.41-3.59 8-8 8z"></path><path fill="#2e865f" d="M13 7h-2v6h6v-2h-4z"></path></svg>
          <span className="ml-2">Newlands Tea Factory</span>
        </span>
        <div className="flex flex-col sm:flex-row flex-wrap gap-2 w-full sm:w-auto mt-2 sm:mt-0">
          <Input
            type="text"
            placeholder="Search by category, desc, ID..."
            className="bg-white text-black rounded px-3 py-1 w-full sm:w-56"
            value={search}
            onChange={e => setSearch(e.target.value)}
          />
          <select
            className="bg-white text-black rounded px-2 py-1 w-full sm:w-auto"
            value={filterCat}
            onChange={e => setFilterCat(e.target.value)}
          >
            <option value="">All Categories</option>
            {CATEGORIES.map((cat) => (
              <option value={cat} key={cat}>{cat}</option>
            ))}
          </select>
          <Input
            type="date"
            className="bg-white text-black rounded px-2 py-1 w-full sm:w-auto"
            value={filterDate}
            onChange={e => setFilterDate(e.target.value)}
          />
          <Button
            colorScheme="gray"
            variant="outline"
            size="sm"
            className="!bg-white !text-black px-3 rounded hover:!bg-green-800 transition w-full sm:w-auto"
            onClick={() => { setFilterCat(""); setFilterDate(""); setSearch(""); }}
          >
            Reset
          </Button>
          <Button
            colorScheme="green"
            variant="solid"
            size="sm"
            className="px-3 rounded hover:bg-white transition w-full sm:w-auto"
            onClick={() => setShowChart(v => !v)}
            title="Show Doughnut Chart"
          >
            <svg width="22" height="22" fill="none" viewBox="0 0 24 24">
              <path fill="#2e865f" d="M11 2v20a10 10 0 100-20z"/>
              <path fill="#2e865f" d="M13 2.05A10.003 10.003 0 0121.95 11H13V2.05z"/>
            </svg>
          </Button>
        </div>
      </div>

      {/* Summary Cards & Doughnut Chart */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 my-8 animate-fadeIn">
        <div className="bg-white rounded-xl p-6 shadow flex items-center">
          <div className="bg-red-100 p-4 rounded-full mr-4">
            <span className="text-2xl">💸</span>
          </div>
          <div>
            <div className="text-gray-500 text-sm">Total Expenses</div>
            <div className="text-xl font-bold text-red-700">
              {formatMoney(totalExpense)}
            </div>
          </div>
        </div>
        <div className="bg-white rounded-xl p-6 shadow flex flex-col items-center justify-center col-span-3">
          {showChart && (
            <Box w="full" maxW="400px" h="56" display="flex" alignItems="center" justifyContent="center" mx="auto" my={2}>
              <Doughnut data={doughnutData} options={{
                plugins: {
                  legend: { display: true, position: "right" }
                },
                maintainAspectRatio: false,
                responsive: true,
              }} />
            </Box>
          )}
        </div>
      </div>

      {/* Main Content */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
        {/* Form */}
        <div>
          <AddEditExpenseModal
            isOpen={modalOpen || !!editData}
            onClose={() => {
              setModalOpen(false);
              setEditData(null);
            }}
            onSave={handleSave}
            initialData={editData}
          />
        </div>
        {/* Table */}
        <div className="md:col-span-2">
          <div className="bg-white rounded-xl p-6 shadow animate-fadeIn">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold">Recent Expenses</h3>
            </div>
            <div className="overflow-x-auto">
              <table className="min-w-full text-sm rounded-xl overflow-hidden">
                <thead>
                  <tr className="bg-green-100">
                    <th className="py-2 px-4">Expense ID</th>
                    <th className="py-2 px-4">Date</th>
                    <th className="py-2 px-4">Category</th>
                    <th className="py-2 px-4">Description</th>
                    <th className="py-2 px-4">Amount</th>
                    <th className="py-2 px-4">Status</th>
                    <th className="py-2 px-4">Action</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredExpenses.map((expense) => (
                    <tr key={expense._id} className="hover:bg-green-50 transition">
                      <td className="py-2 px-4 font-mono text-xs">{expense.expenseId || ""}</td>
                      <td className="py-2 px-4">{new Date(expense.date).toLocaleDateString()}</td>
                      <td className="py-2 px-4">{expense.category}</td>
                      <td className="py-2 px-4">{expense.description}</td>
                      <td className="py-2 px-4 font-semibold">{formatMoney(expense.amount)}</td>
                      <td className="py-2 px-4">
                        <Badge
                          colorScheme={expense.status === "Approved" ? "green" : "yellow"}
                          variant="subtle"
                          px={3}
                          py={1}
                          rounded="md"
                          fontWeight="bold"
                          fontSize="xs"
                        >
                          {expense.status}
                        </Badge>
                      </td>
                      <td className="py-2 px-4 space-x-2 flex">
                        <ChakraTooltip label="Edit" hasArrow>
                          <IconButton
                            icon={<FiEdit2 />}
                            aria-label="Edit"
                            colorScheme="blue"
                            variant="ghost"
                            size="sm"
                            onClick={() => {
                              setEditData(expense);
                              setShowForm(false);
                            }}
                          />
                        </ChakraTooltip>
                        <ChakraTooltip label="Delete" hasArrow>
                          <IconButton
                            icon={<FiTrash2 />}
                            aria-label="Delete"
                            colorScheme="red"
                            variant="ghost"
                            size="sm"
                            onClick={() => handleDelete(expense._id)}
                          />
                        </ChakraTooltip>
                      </td>
                    </tr>
                  ))}
                  {filteredExpenses.length === 0 && (
                    <tr>
                      <td colSpan={7} className="text-center py-6 text-gray-400">
                        No expenses found.
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>

      {/* Hidden PNG Report Template (for download) */}
      <div style={{ position: "absolute", left: "-9999px", top: 0 }}>
        <ExpensePNGReport
          ref={pngRef}
          totalExpense={totalExpense}
          categoryTotals={categoryTotals}
          date={todayStr}
        />
      </div>

      <style>{`
        .animate-fadeIn {
          animation: fadeIn 0.7s;
        }
        @keyframes fadeIn {
          0% { opacity: 0; transform: translateY(30px);}
          100% { opacity: 1; transform: translateY(0);}
        }
      `}</style>
    </div>
  );
}
